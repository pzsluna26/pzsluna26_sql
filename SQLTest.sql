-- 1. 마당서점의 고객이 요구하는 다음 질문에 대해 SQL 문을 작성하시오.
-- (1) 도서번호가 1인 도서의 이름
SELECT BOOKNAME 
FROM BOOK 
WHERE BOOKID = '1';

-- (2) 가격이 20,000원 이상인 도서의 이름
SELECT BOOKNAME 
FROM BOOK
WHERE PRICE >= 20000;

-- (3) 박지성의 총구매액
SELECT CUSTOMER.NAME,SUM(ORDERS.SALEPRICE) 
FROM ORDERS,CUSTOMER 
WHERE CUSTOMER.CUSTID = ORDERS.CUSTID 
AND CUSTOMER.NAME LIKE '박지성' GROUP BY CUSTOMER.NAME; 

-- (4) 박지성이 구매한 도서의 수
SELECT CUSTOMER.NAME, COUNT(*) AS BOOK_COUNT 
FROM ORDERS JOIN CUSTOMER ON CUSTOMER.CUSTID = ORDERS.CUSTID 
WHERE CUSTOMER.NAME='박지성' 
GROUP BY CUSTOMER.NAME;

-- (5) 박지성이 구매한 도서의 출판사 수
SELECT CUSTOMER.NAME, COUNT(*) AS PUBLISHER_COUNT
FROM ORDERS, BOOK, CUSTOMER
WHERE ORDERS.BOOKID = BOOK.BOOKID AND ORDERS.CUSTID = CUSTOMER.CUSTID
AND CUSTOMER.NAME = '박지성';

-- (6) 박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
SELECT 
  BOOK.BOOKNAME, 
  BOOK.PRICE AS ORIGINAL_PRICE, 
  ORDERS.SALEPRICE AS SALE_PRICE,
  (BOOK.PRICE - ORDERS.SALEPRICE) AS PRICE_DIFFERENCE
FROM ORDERS, CUSTOMER, BOOK
JOIN CUSTOMER ON CUSTOMER.CUSTID = ORDERS.CUSTID
JOIN BOOK ON BOOK.BOOKID = ORDERS.BOOKID
WHERE CUSTOMER.NAME = '박지성';

-- (7) 박지성이 구매하지 않은 도서의 이름

-- SELECT BOOK.BOOKNAME
-- FROM BOOK
-- WHERE BOOK.BOOKID NOT IN (
--   SELECT ORDERS.BOOKID
--   FROM ORDERS
--   JOIN CUSTOMER ON ORDERS.CUSTID = CUSTOMER.CUSTID
--   WHERE CUSTOMER.NAME = '박지성'
-- );

-- 2. 마당서점의 운영자와 경영자가 요구하는 다음 질문에 대해 SQL 문을 작성하시오.
-- (1) 마당서점 도서의 총개수
SELECT COUNT(*)
FROM BOOK;

-- (2) 마당서점에 도서를 출고하는 출판사의 총개수
SELECT COUNT(DISTINCT PUBLISHER) 
FROM BOOK;

-- (3) 모든 고객의 이름, 주소
SELECT CUSTOMER.NAME, CUSTOMER.ADDRESS
FROM CUSTOMER;

-- (4) 2024년 7월 4일~7월 7일 사이에 주문받은 도서의 주문번호
SELECT ORDERID
FROM ORDERS, BOOK
WHERE ORDERDATE BETWEEN '2024-07-04' AND '2024-07-07';

-- (5) 2024년 7월 4일~7월 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
SELECT ORDERID 
FROM ORDERS
WHERE ORDERDATE NOT BETWEEN '2024-07-04' AND '2024-07-07';

-- (6) 성이 '김' 씨인 고객의 이름과 주소
SELECT CUSTOMER.NAME, CUSTOMER.ADDRESS
FROM CUSTOMER
WHERE CUSTOMER.NAME LIKE '김%';

-- (7) 성이 '김' 씨이고 이름이 '아'로 끝나는 고객의 이름과 주소
SELECT NAME, ADDRESS
FROM CUSTOMER
WHERE CUSTOMER.NAME LIKE '김%아';

-- (8) 주문하지 않은 고객의 이름(부속질의 사용)
SELECT NAME 
FROM CUSTOMER
WHERE CUSTID NOT IN(
SELECT distinct CUSTID
FROM ORDERS);

-- (9) 주문 금액의 총액과 주문의 평균 금액
SELECT SUM(SALEPRICE), AVG(SALEPRICE)
FROM ORDERS;

-- (10) 고객의 이름과 고객별 구매액
SELECT NAME, SUM(SALEPRICE)
FROM CUSTOMER, ORDERS
GROUP BY NAME;

-- (11) 고객의 이름과 고객이 구매한 도서 목록
SELECT NAME, BOOKNAME
FROM CUSTOMER
JOIN ORDERS ON CUSTOMER.CUSTID = ORDERS.CUSTID
JOIN BOOK ON BOOK.BOOKID = ORDERS.BOOKID;

-- (12) 도서의 가격(Book 테이블)과 판매가격(Orders 테이블)의 차이가 가장 많은 주문
SELECT 
  ORDERS.ORDERID,
  BOOK.BOOKNAME,
  BOOK.PRICE AS ORIGINAL_PRICE,
  ORDERS.SALEPRICE AS SALE_PRICE,
  (BOOK.PRICE - ORDERS.SALEPRICE) AS PRICE_DIFFERENCE
FROM ORDERS
JOIN BOOK ON BOOK.BOOKID = ORDERS.BOOKID
ORDER BY PRICE_DIFFERENCE DESC;


-- (13) 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름

